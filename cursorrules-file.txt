# Cursor Rules for React Development

## Project Structure
- Create components in separate files
- Use a clean, consistent folder structure
- Prefer functional components over class components
- Keep files focused on a single responsibility

## Code Style
- Write concise, readable code
- Use proper indentation and formatting
- Include meaningful comments only when necessary
- Prefer destructuring for props
- Use consistent naming conventions (camelCase for variables/functions, PascalCase for components)

## Development Approach
- Consider at least 3 approaches for each task before deciding
- Present tradeoffs between approaches
- Support decisions with clear reasoning
- Recommend better approaches when the requested solution is suboptimal
- Prioritize maintainability and readability over clever solutions

## Change Management
- Make minimal code changes for each task
- Explain why changes are made
- Specify exactly where changes are occurring
- Do not make significant architectural changes without consultation
- Break down large changes into smaller, manageable steps

## Assumptions
- Do not make assumptions about requirements
- Ask clarifying questions when requirements are ambiguous
- Confirm understanding before implementing complex features
- Validate approach for critical functionality

## Repetitive Tasks
- Complete repetitive tasks fully without shortcuts
- For large data structures or repetitive code, generate the complete implementation
- Continue working until repetitive tasks are fully complete
- Break down progress on long tasks to show incremental completion

## Source Control
- Only commit or publish to GitHub when explicitly requested
- Request confirmation before any commit or push
- Provide a clear commit message for review
- Summarize changes included in each commit

## Communication
- Provide clear explanations for technical decisions
- Use plain language to describe complex concepts
- Include relevant documentation references when appropriate
- Ask for feedback on implemented solutions
